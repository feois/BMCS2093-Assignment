#!/bin/bash

STATE="menu"
EQUIPMENT_FILE="Equipment.txt"
DATE_REGEX="^[0-9]{2}-[0-9]{2}-[0-9]{4}$"
ENTRY_PER_PAGE=3
PAGE=0

echo_line() {
    echo ========================
}

unset_equipment() {
    unset EQUIPMENT_ID EQUIPMENT_TYPE EQUIPMENT_MODEL EQUIPMENT_SERIAL EQUIPMENT_STATUS EQUIPMENT_PURCHASE EQUIPMENT_WARRANTY EQUIPMENT_STR
}

read_equipment_id() {
    local DEFAULT=$4

    if [ "${EQUIPMENT_ID+set}" ]
    then
        if [ -z "$EQUIPMENT_ID" ]
        then
            echo "Equipment ID cannot be empty!"
        elif echo "${EQUIPMENT_ID}" | egrep -q "^[0-9]{4}$"
        then
            if [ "$1" = "new" ] && egrep -q "^$EQUIPMENT_ID:" "$EQUIPMENT_FILE"
            then
                echo "Equipment with ID $EQUIPMENT_ID already exists!"
#             elif [ "$1" = "search" ] && ! egrep -q "^$EQUIPMENT_ID:" "$EQUIPMENT_FILE"
#             then
#                 echo "Equipment with ID $EQUIPMENT_ID does not exist!"
            else
                echo "$3: $EQUIPMENT_ID"

                return 0
            fi
        else
            echo "Invalid equipment ID (e.g. 1234)!"
        fi
    fi

    read -p "$2: " EQUIPMENT_ID
    EQUIPMENT_ID=${EQUIPMENT_ID:-"$DEFAULT"}

    return 1
}

read_equipment_type() {
    local DEFAULT=$3

    if [ "${EQUIPMENT_TYPE+set}" ]
    then
        if [ -z "$EQUIPMENT_TYPE" ]
        then
            echo "Equipment type cannot be empty!"
        elif echo "${EQUIPMENT_TYPE}" | grep -v -q ':'
        then
            echo "$2: $EQUIPMENT_TYPE"

            return 0
        else
            echo "Colon is not permitted!"
        fi
    fi

    read -p "$1: " EQUIPMENT_TYPE
    EQUIPMENT_TYPE=${EQUIPMENT_TYPE:-"$DEFAULT"}

    return 1
}

read_equipment_model() {
    local DEFAULT=$3

    if [ "${EQUIPMENT_MODEL+set}" ]
    then
        if [ -z "$EQUIPMENT_MODEL" ]
        then
            echo "Equipment model cannot be empty!"
        elif echo "${EQUIPMENT_MODEL}" | grep -v -q ':'
        then
            echo "$2: $EQUIPMENT_MODEL"

            return 0
        else
            echo "Colon is not permitted!"
        fi
    fi

    read -p "$1: " EQUIPMENT_MODEL
    EQUIPMENT_MODEL=${EQUIPMENT_MODEL:-"$DEFAULT"}

    return 1
}

read_equipment_serial() {
    local DEFAULT=$3

    if [ "${EQUIPMENT_SERIAL+set}" ]
    then
        if [ -z "$EQUIPMENT_SERIAL" ]
        then
            echo "Equipment serial number cannot be empty!"
        elif echo "${EQUIPMENT_SERIAL}" | egrep -q "^SN[0-9]{9}$"
        then
            echo "$2: $EQUIPMENT_SERIAL"

            return 0
        else
            echo "Invalid equipment serial number (e.g. SN123456789)!"
        fi
    fi

    read -p "$1: " EQUIPMENT_SERIAL

    EQUIPMENT_SERIAL=$(echo "$EQUIPMENT_SERIAL" | tr '[:lower:]' '[:upper:]')
    EQUIPMENT_SERIAL=${EQUIPMENT_SERIAL:-"$DEFAULT"}

    return 1
}

read_equipment_status() {
    local DEFAULT=$3

    if [ "${EQUIPMENT_STATUS+set}" ]
    then
        if [ -z "$EQUIPMENT_STATUS" ]
        then
            echo "Invalid status!"
        else
            echo "$2: $EQUIPMENT_STATUS"
            return 0
        fi
    fi

    read -n 1 -p "$1: " EQUIPMENT_STATUS

    if [ -z "$EQUIPMENT_STATUS" ] && [ "$DEFAULT" ]
    then
        EQUIPMENT_STATUS="$DEFAULT"
    else
        EQUIPMENT_STATUS=$(echo "$EQUIPMENT_STATUS" | tr '[:upper:]' '[:lower:]')

        case $EQUIPMENT_STATUS in
            "a")
                EQUIPMENT_STATUS="Available"
                ;;

            "u")
                EQUIPMENT_STATUS="Unavailable"
                ;;

            *)
                EQUIPMENT_STATUS=""
                ;;
        esac
    fi

    return 1
}

read_equipment_purchase() {
    local DEFAULT=${3:-"$(date '+%m-%d-%Y')"}

    if [ "${EQUIPMENT_PURCHASE+set}" ]
    then
        if echo "${EQUIPMENT_PURCHASE}" | egrep -q "$DATE_REGEX"
        then
            echo "$2: $EQUIPMENT_PURCHASE"

            return 0
        else
            echo "Invalid date!"
        fi
    fi

    read -p "$1: " EQUIPMENT_PURCHASE
    EQUIPMENT_PURCHASE=${EQUIPMENT_PURCHASE:-"$DEFAULT"}

    return 1
}

read_equipment_warranty() {
    local DEFAULT=$3

    if [ "${EQUIPMENT_WARRANTY+set}" ]
    then
        if [ -z "$EQUIPMENT_WARRANTY" ]
        then
            echo "Equipment warranty date cannot be empty!"
        elif echo "${EQUIPMENT_WARRANTY}" | egrep -q "$DATE_REGEX"
        then
            echo "$2: $EQUIPMENT_WARRANTY"

            return 0
        else
            echo "Invalid date!"
        fi
    fi

    read -p "$1: " EQUIPMENT_WARRANTY
    EQUIPMENT_WARRANTY=${EQUIPMENT_WARRANTY:-"$DEFAULT"}

    return 1
}

read_quit_continue() {
    echo "Press (q) to return to Equipment Maintenance Menu."
    echo

    if [ -z "$1" ]
    then
        read -n 1 READ_CONTINUE

        READ_CONTINUE=$(echo "$READ_CONTINUE" | tr '[:upper:]' '[:lower:]')

        if [ "$READ_CONTINUE" = "q" ]
        then
            return 0
        fi
    else
        read -n 1 -p "$1? (y)es or (q)uit: " READ_CONTINUE

        READ_CONTINUE=$(echo "$READ_CONTINUE" | tr '[:upper:]' '[:lower:]')

        case $READ_CONTINUE in
            "y") ;;
            "q") ;;
            *)
                return 1
                ;;
        esac

        return 0
    fi

    return 1
}

serialize() {
    EQUIPMENT_STR="$EQUIPMENT_ID:$EQUIPMENT_TYPE:$EQUIPMENT_MODEL:$EQUIPMENT_SERIAL:$EQUIPMENT_STATUS:$EQUIPMENT_PURCHASE:$EQUIPMENT_WARRANTY"
}

deserialize() {
    local VARIABLE_PREFIX=$1

    VARIABLE_PREFIX=${VARIABLE_PREFIX:-"EQUIPMENT"}

    IFS=':' read "${VARIABLE_PREFIX}_ID" "${VARIABLE_PREFIX}_TYPE" "${VARIABLE_PREFIX}_MODEL" "${VARIABLE_PREFIX}_SERIAL" "${VARIABLE_PREFIX}_STATUS" "${VARIABLE_PREFIX}_PURCHASE" "${VARIABLE_PREFIX}_WARRANTY" <<< "$EQUIPMENT_STR"
}

if [ ! -e "$EQUIPMENT_FILE" ]
then
    echo "ID:Type:Model:Serial:Status:PurchaseDate:WarrantyDate" > "$EQUIPMENT_FILE"
fi

while true
do
    clear
    case $STATE in
        "menu")
            cat <<- EOF
			Equipment Maintenance Menu

			A – Add New Computer Lab Equipment Details
			S – Search Equipment by Serial Number
			U – Update an Equipment Details
			D – Delete an Equipment Details
			M – Sort Equipment by Model
			T – Sort equipment by Status
			P – Sort equipment by Type
			Q – Exit from Program

			EOF

            if [ "${MENU_SELECTION+set}" ]
            then
                case $MENU_SELECTION in
                    "A")
                        STATE="add"
                        ;;

                    "S")
                        STATE="search"
                        ;;

                    "U")
                        STATE="update"
                        ;;

                    "D")
                        STATE="delete"
                        ;;

                    "Q")
                        STATE="exit"
                        ;;

                    *)
                        unset MENU_SELECTION
                        ;;
                esac

                if [ "${MENU_SELECTION+set}" ]
                then
                    unset MENU_SELECTION
                    continue
                else
                    echo "Invalid choice!"
                fi
            fi

            read -n 1 -p "Please select a choice: " MENU_SELECTION

            MENU_SELECTION=$(echo "$MENU_SELECTION" | tr '[:lower:]' '[:upper:]')
            ;;

        "add")
            echo "Add Equipment Details Form"
            echo_line

            if ! read_equipment_id new "Equipment ID" "Equipment ID"; then continue; fi
            if ! read_equipment_type "Type" "Type"; then continue; fi
            if ! read_equipment_model "Model" "Model"; then continue; fi
            if ! read_equipment_serial "Serial Number" "Serial Number"; then continue; fi
            if ! read_equipment_status "Status (Available / Unavailable)" "Status"; then continue; fi
            if ! read_equipment_purchase "Purchase Date (MM-DD-YYYY)" "Purchase Date"; then continue; fi
            if ! read_equipment_warranty "Warranty Date (MM-DD-YYYY)" "Warranty Date"; then continue; fi

            echo

            if read_quit_continue "Add another new Equipment details"
            then
                serialize
                echo $EQUIPMENT_STR >> "$EQUIPMENT_FILE"
                unset_equipment

                if [ "$READ_CONTINUE" = "q" ]
                then
                    STATE="menu"
                fi
            fi

            ;;

        "search")
            echo "Search Equipment"
            echo
            if ! read_equipment_serial "Enter Serial Number" "Serial Number"
            then
                PAGE=0
                continue
            fi
            echo
            echo_line
            echo

            EQUIPMENTS_MATCHED=$(egrep "^.*:.*:.*:$EQUIPMENT_SERIAL:.*:.*:.*$" "$EQUIPMENT_FILE")
            EQUIPMENTS_COUNT=$(echo "$EQUIPMENTS_MATCHED" | wc -l)

            if [ -z "$EQUIPMENTS_MATCHED" ]
            then
                echo "No equipment found with the serial number $EQUIPMENT_SERIAL"
                echo
                echo_line
                echo
            else
                echo "$EQUIPMENTS_MATCHED" | tail -n $(( EQUIPMENTS_COUNT - PAGE * ENTRY_PER_PAGE )) | head -n $(( ENTRY_PER_PAGE )) | while IFS= read EQUIPMENT_STR
                do
                    deserialize
                    echo "Equipment ID: $EQUIPMENT_ID"
                    echo "Type: $EQUIPMENT_TYPE"
                    echo "Model: $EQUIPMENT_MODEL"
                    echo "Status: $EQUIPMENT_STATUS"
                    echo "Purchase Date: $EQUIPMENT_PURCHASE"
                    echo "Warranty Date: $EQUIPMENT_WARRANTY"
                    echo
                    echo_line
                    echo
                done
                echo "Showing $ENTRY_PER_PAGE equipments per page (Page $(( PAGE + 1 )) of $(( (EQUIPMENTS_COUNT - 1) / ENTRY_PER_PAGE + 1 )))"
                echo
                echo "Press - and = to decrease and increase equipments shown per page respectively."
                echo "Press [ and ] to go to previous and next page respectively. "
            fi

            if read_quit_continue "Search another equipment"
            then
                unset_equipment

                if [ "$READ_CONTINUE" = "q" ]
                then
                    STATE="menu"
                fi
            else
                case $READ_CONTINUE in
                    "-")
                        if (( ENTRY_PER_PAGE > 1 ))
                        then
                            ENTRY_PER_PAGE=$(( ENTRY_PER_PAGE - 1 ))
                            PAGE=0
                        fi
                        ;;

                    "=")
                        ENTRY_PER_PAGE=$(( ENTRY_PER_PAGE + 1 ))
                        PAGE=0
                        ;;

                    "[")
                        if (( PAGE > 0 ))
                        then
                            PAGE=$(( PAGE - 1 ))
                        fi
                        ;;

                    "]")
                        if (( (PAGE + 1) * ENTRY_PER_PAGE < EQUIPMENTS_COUNT ))
                        then
                            PAGE=$(( PAGE + 1 ))
                        fi
                        ;;
                esac
            fi

            ;;

        "update")
            echo "Update Equipment Details"
            echo
            if ! read_equipment_id search "Enter Equipment ID" "Equipment ID"; then continue; fi
            echo
            echo_line
            echo

            EQUIPMENT_STR=$(egrep "^$EQUIPMENT_ID:.*:.*:.*:.*:.*:.*$" "$EQUIPMENT_FILE")

            if [ -z "$EQUIPMENT_STR" ]
            then
                echo "No equipment with ID $EQUIPMENT_ID exists"
            else
                deserialize EQUIPMENT_ORIGINAL

                if ! read_equipment_serial "Serial Number [$EQUIPMENT_ORIGINAL_SERIAL]" "Serial Number" "$EQUIPMENT_ORIGINAL_SERIAL"; then continue; fi
                if ! read_equipment_type "Type [$EQUIPMENT_ORIGINAL_TYPE]" "Type" "$EQUIPMENT_ORIGINAL_TYPE"; then continue; fi
                if ! read_equipment_model "Model [$EQUIPMENT_ORIGINAL_MODEL]" "Model" "$EQUIPMENT_ORIGINAL_MODEL"; then continue; fi
                if ! read_equipment_status "Status (Available /Unavailable) [$EQUIPMENT_ORIGINAL_STATUS]" "Status" "$EQUIPMENT_ORIGINAL_STATUS"; then continue; fi
                if ! read_equipment_purchase "Purchase Date (MM-DD-YYYY) [$EQUIPMENT_ORIGINAL_PURCHASE]" "Purchase Date" "$EQUIPMENT_ORIGINAL_PURCHASE"; then continue; fi
                if ! read_equipment_warranty "Warranty Date (MM-DD-YYYY) [$EQUIPMENT_ORIGINAL_WARRANTY]" "Warranty Date" "$EQUIPMENT_ORIGINAL_WARRANTY"; then continue; fi
            fi

            echo
            echo_line
            echo

            if [ "$EQUIPMENT_STR" ]
            then
                EQUIPMENT_STR="Are you sure you want to UPDATE the above Equipment Details"
            fi

            if read_quit_continue "$EQUIPMENT_STR"
            then
                if [ "$READ_CONTINUE" = "y" ]
                then
                    serialize
                    sed -i "s/^$EQUIPMENT_ID:.*/$EQUIPMENT_STR/" "$EQUIPMENT_FILE"
                fi

                unset_equipment
                STATE="menu"
            fi

            ;;

        "delete")
            echo "Delete Equipment Details"
            echo
            if ! read_equipment_id search "Enter Equipment ID" "Equipment ID"; then continue; fi
            echo
            echo_line
            echo

            EQUIPMENT_STR=$(egrep "^$EQUIPMENT_ID:.*:.*:.*:.*:.*:.*$" "$EQUIPMENT_FILE")

            if [ -z "$EQUIPMENT_STR" ]
            then
                echo "No equipment with ID $EQUIPMENT_ID exists"
            else
                deserialize EQUIPMENT

                echo "Serial Number: $EQUIPMENT_SERIAL"
                echo "Type: $EQUIPMENT_TYPE"
                echo "Model: $EQUIPMENT_MODEL"
                echo "Status: $EQUIPMENT_STATUS"
                echo "Purchase Date: $EQUIPMENT_PURCHASE"
                echo "Warranty Date: $EQUIPMENT_WARRANTY"
            fi

            echo
            echo_line
            echo

            if [ "$EQUIPMENT_STR" ]
            then
                EQUIPMENT_STR="Are you sure you want to DELETE the above Equipment Details"
            fi

            if read_quit_continue "$EQUIPMENT_STR"
            then
                if [ "$READ_CONTINUE" = "y" ]
                then
                    sed -i "/^$EQUIPMENT_ID:.*/d" "$EQUIPMENT_FILE"
                fi

                unset_equipment
                STATE="menu"
            fi

            ;;

        "exit")
            echo "Exit"
            break
            ;;

        *)
            echo "Invalid state: " $STATE
            break
            ;;
    esac
done
